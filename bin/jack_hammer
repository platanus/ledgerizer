#!/usr/bin/env ruby

# Run a concurrency test on the ledgerizer code.
#
# This spawns a bunch of processes, and does random transactions between a set
# of accounts, then validates that all the numbers add up at the end.
#
# You can also tell it to flush our the account balances table at regular
# intervals, to validate that new account balances records get created with the
# correct balances from the lines table.
#
# Run it without arguments to get the usage.

require 'optparse'
require 'bundler/setup'
require 'active_record'
require 'database_cleaner'
require 'pry'
require 'erb'

config_dir = File.expand_path("../../spec/dummy/config/", __FILE__)
db_dir = File.expand_path("../../spec/dummy/db/", __FILE__)
support_dir = File.expand_path("../../spec/dummy/spec/support/", __FILE__)

db_config = File.read(File.join(config_dir, "database.yml"))
parsed_db_condig = ERB.new(db_config).result
test_db_config = YAML.load(parsed_db_condig)["test"]

ActiveRecord::Base.establish_connection(test_db_config)

require File.expand_path("../spec/dummy/config/environment", __dir__)
require "#{db_dir}/schema"

lib = File.expand_path('../lib', __FILE__)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)

require 'ledgerizer'
require "#{support_dir}/test_class_helpers.rb"

# Preload to avoid circular dependency error
Deposit
Ledgerizer::Entry
Ledgerizer::FilteredLinesQuery

class LedgerizerTest
  include Ledgerizer::Definition::Dsl

  def self.setup
    yield self
  end
end

def parse_options
  $account_count = 5
  $process_count = 20
  $entry_count = 20000
  $use_threads = false
  $test_dup_entries = false

  options = OptionParser.new

  options.on("-p", "--processes=COUNT", Integer, "Number of processes (default: #{$process_count})") do |value|
    $process_count = value
  end

  options.on("-e", "--entries=COUNT", Integer, "Number of entries (default: #{$entry_count})") do |value|
    $entry_count = value
  end

  options.on("-z", "--threads", "Use threads instead of processes") do |value|
    $use_threads = !!value
  end

  options.on("-d", "--test-dup-entries", "To test duplicated entries") do |value|
    $test_dup_entries = !!value
  end

  options.parse(*ARGV)
end

def clean_out_database
  puts "Cleaning out the database..."

  DatabaseCleaner.clean_with(:truncation)
end

def setup
  puts "Setting up accounts and entries..."

  LedgerizerTest.setup do |conf|
    conf.tenant(:portfolio, currency: :clp) do
      conf.asset :account1
      conf.liability :account2

      conf.entry :test, document: :deposit do
        conf.debit account: :account1, accountable: :user
        conf.credit account: :account2, accountable: :user
      end
    end
  end

  now = DateTime.current
  entry_times = [now - 1.day, now - 2.days]

  $ledgerizer_config = LedgerizerTest.definition
  $tenant = Portfolio.create!
  $asset_accountables = []
  $liability_accountables = []
  $documents = []

  3.times { $asset_accountables << User.create! }
  3.times { $liability_accountables << User.create! }
  60.times { $documents << [Deposit.create!, entry_times.sample]  }
end

def run_tests
  puts "Spawning #{$process_count} processes..."

  iterations_per_process = [ ($entry_count / $process_count), 1 ].max

  Ledgerizer::Account.delete_all
  ActiveRecord::Base.connection_pool.disconnect!

  if $use_threads
    puts "Using threads as workers"
    threads = []
    $process_count.times do |process_num|
      threads << Thread.new { run_process(iterations_per_process, process_num) }
    end

    threads.each(&:join)
  else
    puts "Using processes as workers"
    pids = []
    $process_count.times do |process_num|
      pids << fork { run_process(iterations_per_process, process_num) }
    end

    pids.each {|pid| Process.wait2(pid) }
  end
end

def run_process(iterations, process_num)
  srand  # Seed the random number generator separately for each process.

  puts "Process #{process_num} running #{iterations} entries..."

  iterations.times do |i|
    accountable_a = $asset_accountables.sample
    accountable_b = $liability_accountables.sample
    amount = 5.times.map { |n| (n+1) * 10000 }.sample
    clp_amount = Money.new(amount, "CLP")
    doc, time = $documents.sample

    executor = Ledgerizer::EntryExecutor.new(
      config: $ledgerizer_config,
      tenant: $tenant,
      document: $test_dup_entries ? doc : Deposit.create!,
      entry_code: :test,
      entry_time: time
    )

    executor.add_new_movement(
      movement_type: :debit,
      account_name: :account1,
      accountable: accountable_a,
      amount: clp_amount
    )

    executor.add_new_movement(
      movement_type: :credit,
      account_name: :account2,
      accountable: accountable_b,
      amount: clp_amount
    )

    executor.execute
  end
end

def check_results
  puts "Checking account lines and balances..."

  if Ledgerizer::Line.count == $entry_count * 2
    puts "All the Line records were written :)"
  else
    puts "Not enough Line records written :(" unless $test_dup_entries
  end

  lines_count = 0

  Ledgerizer::Account.all.each do |account|
    last_line_balance = account.lines.filtered.first&.balance.to_s
    account_balance = account.balance.to_s
    lines_sum_balance = account.lines.amounts_sum("CLP")
    lines_count += account.lines.count

    if account.check_integrity
      puts "success :) - account ##{account.id} with valid lines and balance #{account.balance}"
    else
      puts "failure :( - account ##{account.id} with invalid lines and balance"
    end
  end

  puts "entries count: #{Ledgerizer::Entry.count}"
  puts "lines count: #{lines_count}"
end

parse_options
clean_out_database
setup
run_tests
check_results
